<HTML>
<HEAD>
</HEAD>
<BODY>

<H2>The PNPEVENT Sample</H2>
<P>The PNPEVENT Sample accompanies Chapter 6 and illustrates how to intercept Plug and Play events in user mode.</P>
<P>The sample includes two components:</P>

<UL>
<LI>PNPEVENT.SYS (SYS subdirectory) is a WDM driver for a non-existent hardware device. </LI>
<LI>TEST.EXE (TEST subdirectory) is a user-mode test program for PNPEVENT.SYS.</LI></UL>

<H3>Building PNPEVENT</H3>
<P>To build PNPEVENT.SYS, follow the <A HREF="../../wdmbook.htm#wdmbuild">general instructions for building a WDM sample</A>. The Microsoft Visual C++ project file is named PNPEVENT.DSP in the SYS subdirectory.</P>
<P>To build TEST.EXE, follow the <A HREF="../../wdmbook.htm#usermodebuild">general instructions for building user-mode programs</A>. The Microsoft Visual C++ project file is named TEST.DSP in the TEST subdirectory.</P>
<H3>Testing PNPEVENT</H3>
<P>First launch the TEST.EXE program from the TEST\DEBUG subdirectory. TEST will present a simple dialog box with the title "PnP Event Driver Test Applet".</P>
<P>With the TEST dialog visible, install the PNPEVENT driver. Follow the general instructions for using <A HREF="../../wdmbook.htm#fastinst">FastInst</A> in Windows XP or Windows 98/Me. The INF file is named SYS\PNPEVENT.INF.</P>
<B><I><P>In Windows 98/Me, you’ll also need to have </B></I><A HREF="../../appendixa/newstub/wdmstub.htm">WDMSTUB.SYS</A><B><I> installed in your drivers directory. PNPEVENT.SYS will otherwise fail to load because of its reference to IoReportTargetDeviceChangeAsynchronous.</P>
</B></I><P>When you install PNPEVENT, it registers a device interface for which TEST has called RegisterDeviceNotification. You should see a message about the arrival of the device.</P>
<P>Now try disabling PNPEVENT in the Device Manager. In Windows XP, Device Manager will ask you if you’re sure you want to disable the device, and you should answer, "Yes." (In Windows 98/Me, you'll be checking the check box labelled "Disable In This Hardware Profile" on the properties page, and the Device Manager won't acknowledge your selection.) TEST will also ask you if it’s OK to remove the device. Answering "No" at this point will prevent PNPEVENT from actually being removed until you reboot the computer.</P>
<P>If you answer "Yes" to TEST’s query about removing the device, TEST will then present a message box to inform you it’s closing its device handle. Thereafter, you’ll see a message in TEST’s dialog to the effect that the PNPEVENT device has been removed.</P>
<I><P>The Send Event button will be enabled while the PNPEVENT device is present, but you won’t be able to see what it does unless you run the </I><A HREF="../pnpmon/pnpmon.htm">PNPMON sample</A><I> at the same time.</P></I>
<p>It's useful to run the PNPDTEST in Windows XP in conjunction with this test. (Do I detest PnP?
Not half so much as I detest Power Management.)</p>

<h3>What to look for</h3>
<p>The interesting code in this sample is in <b>TestDlg.cpp</b>, which contains comments describing
how to request and deal with device notifications.</p>

</BODY>
</HTML>
