<HTML>
<HEAD>
</HEAD>
<BODY>

<H2>The EVWAIT Sample</H2>
<P>The EVWAIT Sample accompanies Chapter 9 and illustrates how an application can wait on an event set by a WDM driver. This sample was
considerably simplified for the 2d edition.</P>
<P>The sample includes two components:</P>

<UL>
<LI>EVWAIT.SYS (SYS subdirectory) is a WDM driver for a non-existent hardware device. </LI>
<LI>TEST.EXE (TEST subdirectory) is a Win32 console program for testing EVWAIT.SYS.</LI></UL>

<H3>Building EVWAIT</H3>
<P>To build EVWAIT.SYS, follow the <A HREF="../../wdmbook.htm#wdmbuild">general instructions for building a WDM sample</A>. The Microsoft Visual C++ project file is named EVWAIT.DSP in the SYS subdirectory.</P>
<P>To build TEST.EXE, follow the <A HREF="../../wdmbook.htm#usermodebuild">general instructions for building user-mode programs</A>. The Microsoft Visual C++ project file is named TEST.DSP in the TEST subdirectory.</P>
<H3>Testing EVWAIT</H3>
<P>First install EVWAIT.SYS. Follow the general instructions for using <A HREF="../../wdmbook.htm#fastinst">FastInst</A> in Windows XP or Windows 98/Me. The INF file is named SYS\EVWAIT.INF.</P>
<P>To test EVWAIT, open a command prompt and launch TEST.EXE from the TEST\DEBUG subdirectory. TEST will use an I/O Control operation to communicate an event handle to EVWAIT and then wait for you to type a keystroke on the keyboard. You can perform three different tests:</P>

<UL>
<LI>Type a key. TEST will print a message to the effect that the event has happened, and then it will exit. </LI>
<LI>Type Ctrl+Break. TEST will exit. If you’re watching in a debugger, you should find that EVWAIT correctly cleans up. </LI>
<LI>Use the Device Manager to disable or remove the EVWAIT device. You will have to terminate TEST with Ctrl+Break, but you should find that EVWAIT correctly cleans up.</LI>
</UL>

<h3>What to look for</h3>
<p>The meat of this sample is in the handler for the IOCTL_REGISTER_EVENT control code in <b>control.cpp</b>.</p>
</BODY>
</HTML>
